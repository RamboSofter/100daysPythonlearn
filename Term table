问题解决（problem solving）:总结问题、寻找解决方案以及表达解决方案的过程。
高级语言（high-level language）:设计来方便人们读写的编程语言，比如python
低级语言（low-level language）:机器语言
可移植性（protability）:程序的一种属性：可以在多种类型的计算机上运行
解释（interpret）：按照一行一行解释翻译的方式来执行高级语言编写的程序
编译（compile）:一次性将一个高级语言编写的程序翻译为低级语言程序，之后可以单独运行。
源代码（source code）：使用高级语言编写的程序，在编译之前被称为源代码
目标代码（object code）：编译器输出的程序
可执行文件（executable）:目标代码的另一个名字，表示它可以直接被执行
提示符（promt）：解释器显示出来的文字，用来表示它准备好接收用户新的输入。
脚本（script）：保存在文件中的程序（用于被解释器解释执行）
交互模式（interactive ）:使用Python解释器的一种方式。在解释器的提示处输入命令和表达式。
脚本模式（scipt mode）:使用Python解释器的另一种方式。读取并执行一个脚本文件中的代码。
程序（Program）:一系列代码指令的集合，指定一种运算。
算法（algorithm):解决某一类问题的通用运算流程。
bug：程序中的一个错误。
调试（debugging）:发现和解决程序中出现的3类错误的过程。
语法（syntax）:程序的结构。
语法错误（syntax error）：程序中的一种错误，导致它无法进行语法解析（因此也无法被解释器执行）
异常（exception）:程序运行中发现的错误
语义（semantic）:程序表达的意义
语义错误（semantic error）:程序中的一种错误，导致它无法进行语法解析（因此也无法被解释器执行）
自然语言（natural language）：自然演化而来的人们所说的语言。
形式语言（formal language）：人们设计来用于某些特定目的的语言，例如表达数学概念或计算机程序。所有的编程语言都属于形式语言。
记号（token）程序的语法结构的最基本单元，类似于自然语言中的词。
语法分析（parse）:检查程序并分析其语法结构
print语句（print statement）:一个指令，可以通知Python解释器在屏幕上输出一个值。
值（value）:程序中操作的数据的基本单位，如数字或字符串
类型（type）：值的类别。整数（int），浮点数（float），字符串（str）
整数（integer）：用来表达整数的类型
浮点数（floating-point）：用来表示带小数部分的数的类型
字符串（string）：用来表示一串字符的类型
变量（variable）：引用一个值的名字
语句（statement）:表示应该命令或行动的一段代码。赋值语句，print语句
赋值（assignment）：将一个值赋值给变量的语句
状态图（state diagram）:用来展示一些变量以及其值的图示
关键字（keyword）:编译器或解释器保留的词，用于解析程序；变量名不能使用关键字，如if,def,while等
操作符（operator）：用来表示简单的运算的特殊符号，如加法、乘法或字符串串联
操作数（operand）:操作符所操作的值
舍去式除法（floor division）:两个数相除，并舍取结果的小数部分的操作
表达式（expression）:变量、操作符和值的组合，可以表示一个单独的结果值
求值（evaluate）：对表达式按照操作的顺序进行计算，求得其结果值
优先级规则（rules of precedence）:当有多个操作符和操作对象时，用于指导操作计算顺序的规则
拼接（concatenate）：将两个操作数首尾相连
注释（comment）：代码中附加的注解信息，用于帮助其他程序员阅读代码，并不影响程序的运行
函数（function）：一个有名称的语句序列，可以进行某种有用的操作。函数可以接收或者不接收参数，可以返回或不返回结果。
函数定义（function object）:函数定义所创建的值。函数名可以用作变量来引用一个函数对象。
函数头（header）:函数定义的第一行。
函数体（body）：函数定义内的语句序列。
形参（parameter）：函数内使用的用来引用作为实参传入的值的名称。
函数调用（function call）：执行一个函数的语句。它由函数名称和参数列表组成。
实参（argument）：当函数调用时，提供给它的值。这个值会被赋值给对应的形参。
局部变量（local variable）：函数内定义的变量。局部变量只能在函数体内使用
返回值（return value）：函数的结果。如果函数被当作表达式调用，返回值就是表达式的值
有返回值函数（fruitful function）：返回一个值的函数
无返回值的函数（void function）：没有返回值的函数
模块（module）：一个包含相关函数以及其他定义的集合的文件
import语句（import statement）：读入一个模块文件，并创建一个模块对象的语句
模块对象（module object）：使用import语句时创建的对象，提供对模块中定义的值的访问
句点表示法（dot notation）:调用另一个模块中的函数的语法，使用模块名加上一个句点符号，再加上函数名
组合（composition）：使用一个表达式作为更大的表达式的一部分，或者使用语句作为更大的语句的一部分
执行流程（flow of execution）：程序运行中语句执行的顺序
栈图（stack diagram）：函数栈的图形表达形式，也展示它们的变量，以及这些变量引用的值
图框（frame）：栈图中的一个图框，表达一个函数调用。它包含了局部变量以及函数的参数
回溯（traceback）：当异常发生时，打印出正在执行的函数栈
实例（instance）：一个集合中的一员
循环（loop）：程序中的一个片段，可以重复执行
封装（encapsulation）：将一组语句转换为函数定义的过程
泛化（generalization）：将一些不必要的具体值（如一个数字）替换为合适的通用参数或变量的过程
关键词参数（keyword argument）:调用函数时，附带了参数名称（作为一个“关键词”）说明
接口（instance）：描述函数如何使用的说明。包括函数的名称，以及形参与返回值的说明
重构（refactoring）：修改代码并改善函数的接口以及代码质量的过程
开发计划（development plan）：写程序的过程
文档字符串（docstring）：在函数定义开始处出现的说明函数接口的字符串
前置条件（precondition）：在函数调用开始前应当满足的条件
后置条件（post condition）：在函数调用结束后应当满足的条件
求模操作符(modulus operator):%
关系操作符（relation operator）：==  != > < >= <=
布尔表达式（boolean expression）:True 或False
逻辑操作符（logical operator）：and or not
条件语句（condition statement）：依照某些条件控制程序执行流程的语句
条件（condition）：条件语句中的布尔表达式，由它决定执行哪一个分支
复合语句（compound statement）：一个包含语句头和语句体的语句。语句头以冒号（：）结尾。语句体相对语句头缩进一层
分支（branch）：条件语句中的一个可能性分支语句段
条件链语句（chained conditional）：一种包含多个分支的条件语句
嵌套条件语句（nested conditional）：在其他条件语句的分支中出现的条件语句
递归（recursion）：在当前函数中调用自己的过程
基准情形（base case）:递归函数中的一个条件分支，里面不会再继续递归调用
无限递归（infinite recursion）：没有基准情形的递归，或者永远无法达到基准情形的分支的递归调用。最终，这种无限递归会导致运行时出错
