问题解决（problem solving）:总结问题、寻找解决方案以及表达解决方案的过程。
高级语言（high-level language）:设计来方便人们读写的编程语言，比如python
低级语言（low-level language）:机器语言
可移植性（protability）:程序的一种属性：可以在多种类型的计算机上运行
解释（interpret）：按照一行一行解释翻译的方式来执行高级语言编写的程序
编译（compile）:一次性将一个高级语言编写的程序翻译为低级语言程序，之后可以单独运行。
源代码（source code）：使用高级语言编写的程序，在编译之前被称为源代码
目标代码（object code）：编译器输出的程序
可执行文件（executable）:目标代码的另一个名字，表示它可以直接被执行
提示符（promt）：解释器显示出来的文字，用来表示它准备好接收用户新的输入。
脚本（script）：保存在文件中的程序（用于被解释器解释执行）
交互模式（interactive ）:使用Python解释器的一种方式。在解释器的提示处输入命令和表达式。
脚本模式（scipt mode）:使用Python解释器的另一种方式。读取并执行一个脚本文件中的代码。
程序（Program）:一系列代码指令的集合，指定一种运算。
算法（algorithm):解决某一类问题的通用运算流程。
bug：程序中的一个错误。
调试（debugging）:发现和解决程序中出现的3类错误的过程。
语法（syntax）:程序的结构。
语法错误（syntax error）：程序中的一种错误，导致它无法进行语法解析（因此也无法被解释器执行）
异常（exception）:程序运行中发现的错误
语义（semantic）:程序表达的意义
语义错误（semantic error）:程序中的一种错误，导致它无法进行语法解析（因此也无法被解释器执行）
自然语言（natural language）：自然演化而来的人们所说的语言。
形式语言（formal language）：人们设计来用于某些特定目的的语言，例如表达数学概念或计算机程序。所有的编程语言都属于形式语言。
记号（token）程序的语法结构的最基本单元，类似于自然语言中的词。
语法分析（parse）:检查程序并分析其语法结构
print语句（print statement）:一个指令，可以通知Python解释器在屏幕上输出一个值。
值（value）:程序中操作的数据的基本单位，如数字或字符串
类型（type）：值的类别。整数（int），浮点数（float），字符串（str）
整数（integer）：用来表达整数的类型
浮点数（floating-point）：用来表示带小数部分的数的类型
字符串（string）：用来表示一串字符的类型
变量（variable）：引用一个值的名字
语句（statement）:表示应该命令或行动的一段代码。赋值语句，print语句
赋值（assignment）：将一个值赋值给变量的语句
状态图（state diagram）:用来展示一些变量以及其值的图示
关键字（keyword）:编译器或解释器保留的词，用于解析程序；变量名不能使用关键字，如if,def,while等
操作符（operator）：用来表示简单的运算的特殊符号，如加法、乘法或字符串串联
操作数（operand）:操作符所操作的值
舍去式除法（floor division）:两个数相除，并舍取结果的小数部分的操作
表达式（expression）:变量、操作符和值的组合，可以表示一个单独的结果值
求值（evaluate）：对表达式按照操作的顺序进行计算，求得其结果值
优先级规则（rules of precedence）:当有多个操作符和操作对象时，用于指导操作计算顺序的规则
拼接（concatenate）：将两个操作数首尾相连
注释（comment）：代码中附加的注解信息，用于帮助其他程序员阅读代码，并不影响程序的运行
