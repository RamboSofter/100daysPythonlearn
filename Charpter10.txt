#列表的方法：
append方法：在列表尾部添加新的元素：t.append('d')
extend方法：接收一个列表作为参数，并将其所有的元素附加到列表中：t1.extend(t2)
sort方法：将列表中的元素从低到高重新排序：t.sort()
对列表元素累加，sum函数，sum(t)
#编写一个nested_sum,接收一个由内嵌的整数列表组成的列表作为形参，并将内嵌列表中的值全部加起来
def nested_sum(t):
    summ=0
    i=0
    for i in range(len(t)):
        summ=summ+sum(t[i])
    print(summ)

#接收一个字符串列表，并返回一个新列表，其元素是大写的字符串
def capitalize_all(t):
    res=[]
    for s in t:
        res.append(s.capitalize())
    return res
#使用capitalize_all来编写一个函数capitalize_nested,接收一个由内嵌字符串列表组成的列表作为形参，并返回一个新列表，其元素为内嵌的大写字符串的列表
def capitalize_nested(t):
    resum=[]
    i=0
    for i in range(len(t)):
        resum.append(capitalize_all(t[i]))
    return resum
#接收一个字符串列表，并返回那些只包含大写字母的字符串
def only_upper(t):
    res=[]
    for s in t:
        if s.isupper():
            res.append(s)
    return res
    
#编写一个函数，接收一个数字列表，并返回其累积和，即一个新的列表，其第i位元素是原始列表的前i+1个元素的和，例如，[1,2,3]的累积和是[1,3,6]
def addex(t):
    i=0
    res=[]
    for i in range(len(t)):
        res.append(sum(t[0:i+1]))
    return res
#编写一个函数middle，接收一个列表作为形参，并返回一个新列表，包含除了第一个和最后一个元素之外的所有元素。
def middle(t):
    t.pop(0)
    t.pop(len(t)-1)
    return t
#编写一个函数is_sorted,接收一个列表作为形参，并当列表是按照升序排好序的时候返回True，否则返回False。你可以假定（作为前置条件）列表的元素是可以使用关系操作符<,>等比较的
def is_sorted(t):
    i=0
    while i <len(t)-1:
        if t[i]>t[i+1]:
            return False
        i=i+1
    return True
 #回文，编写一个函数is_anagram，接收两个字符串，当它们互为回文时返回True
 def is_anagram(s,t):
    if s==t[::-1]:
        return True
    else:
        return False
#编写一个函数has_duplicates接收一个列表，当其中任何一个元素出现多于一次时，返回true。它不应当修改原始列表
